<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Home | Blogify</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    /* --- Variables and Base Styles --- */
    :root {
      --primary-color: #1abc9c; /* Turquoise */
      --secondary-color: #34495e; /* Wet Asphalt */
      --success-color: #2ecc71; /* Emerald */
      --danger-color: #e74c3c; /* Alizarin */
      --dark-bg: #181c20;
      --card-bg: #23272b;
      --text-primary: #f0f4f8;
      --text-secondary: #aeb6c1;
      --border-color: #2e353c;
      --hover-bg: #2d333a;
      --shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);
    }
    body {
      background: var(--dark-bg);
      color: var(--text-primary);
      margin: 0;
      font-family: 'Inter', 'Segoe UI', Arial, sans-serif;
      min-height: 100vh;
      line-height: 1.6;
    }
    .main-container {
      max-width: 900px;
      margin: 0 auto;
      padding: 4.5rem 1rem 2rem;
    }
    h1 {
      font-size: 2.2rem;
      margin-bottom: 2rem;
      color: var(--primary-color);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      font-weight: 700;
    }
    .alert {
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
      font-size: 1rem;
      display: flex;
      align-items: center;
      gap: 0.6rem;
      font-weight: 500;
    }
    .alert-success {
      background: rgba(46, 204, 113, 0.15);
      color: var(--success-color);
      border: 1px solid var(--success-color);
    }
    .alert-error {
      background: rgba(231, 76, 60, 0.15);
      color: var(--danger-color);
      border: 1px solid var(--danger-color);
    }
    /* --- Blog Card Styles --- */
    .blogs-list {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    .blog-card {
      background: var(--card-bg);
      border-radius: 1.2rem;
      box-shadow: 0 6px 15px rgba(0, 0, 0, 0.4);
      padding: 1.5rem;
      position: relative;
      transition: all 0.3s ease-in-out;
      border: 1px solid var(--border-color);
    }
    .blog-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(26, 188, 156, 0.15);
      border-color: var(--primary-color);
    }
    .blog-cover {
      border-radius: 10px;
      max-height: 300px;
      width: 100%;
      object-fit: cover;
      margin-bottom: 1.5rem;
      border: 1px solid var(--border-color);
      background: #14161a;
      display: block;
    }
    .author-section {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    .author-img {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--primary-color);
      background: #0d0f12;
    }
    .author-details {
      display: flex;
      flex-direction: column;
    }
    .author-details a {
      color: var(--primary-color);
      font-weight: 600;
      text-decoration: none;
      font-size: 1.1rem;
      transition: color 0.2s;
    }
    .author-details a:hover {
      color: #16a085;
      text-decoration: underline;
    }
    .blog-date {
      color: var(--text-secondary);
      font-size: 0.85rem;
      display: flex;
      align-items: center;
      gap: 0.4rem;
    }
    .blog-title {
      font-size: 1.6rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      line-height: 1.3;
    }
    .blog-title a {
      color: var(--text-primary);
      text-decoration: none;
      transition: color 0.2s;
    }
    .blog-title a:hover {
      color: var(--primary-color);
    }
    .blog-excerpt {
      color: var(--text-secondary);
      font-size: 1rem;
      margin-bottom: 1.5rem;
      line-height: 1.6;
    }
    .blog-excerpt a {
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 500;
    }
    .blog-excerpt a:hover {
      text-decoration: underline;
    }
    /* --- Action/Stats Bar --- */
    .blog-actions-stats {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
    }
    .action-btn, .stat-link, .follow-btn, .read-more-btn {
      border: none;
      outline: none;
      border-radius: 8px;
      padding: 0.6rem 1.2rem;
      font-size: 0.95rem;
      cursor: pointer;
      color: var(--text-primary);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: background 0.2s, transform 0.2s, box-shadow 0.2s;
    }
    .action-btn { background: var(--primary-color); }
    .action-btn.liked { background: var(--danger-color); }
    .action-btn:hover { background: #16a085; transform: translateY(-1px); box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); }
    .action-btn.liked:hover { background: #c0392b; }
    .stat-link {
      background: var(--hover-bg);
      color: var(--text-secondary);
      padding: 0.5rem 1rem;
      cursor: pointer;
    }
    .stat-link:hover {
      background: var(--secondary-color);
      color: var(--text-primary);
    }
    .stat-link img {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      object-fit: cover;
      margin-right: 0.2rem;
    }
    .follow-btn { background: var(--success-color); }
    .follow-btn.following { background: var(--danger-color); }
    .follow-btn.requested { background: #bdc3c7; color: var(--secondary-color); cursor: not-allowed; }
    .follow-btn.cancel { background: var(--danger-color); }
    .follow-btn:hover { background: #219653; transform: translateY(-1px); }
    .follow-btn.following:hover, .follow-btn.cancel:hover { background: #c0392b; }
    .read-more-btn { background: var(--secondary-color); }
    .read-more-btn:hover { background: #2c3e50; }
    /* Menu Styles */
    .blog-menu {
      position: absolute;
      top: 15px;
      right: 15px;
    }
    .dots-btn {
      background: none;
      border: none;
      color: var(--text-secondary);
      font-size: 1.5rem;
      cursor: pointer;
      padding: 0.5rem;
      border-radius: 50%;
      transition: background 0.2s, color 0.2s;
    }
    .dots-btn:hover {
      background: var(--hover-bg);
      color: var(--primary-color);
    }
    .dropdown-menu {
      display: none;
      position: absolute;
      top: 100%;
      right: 0;
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.3);
      z-index: 1000;
      min-width: 180px;
      padding: 0.5rem 0;
      transform: translateY(10px);
      transition: opacity 0.2s, transform 0.2s;
    }
    .dropdown-menu.active {
      display: block;
      opacity: 1;
      transform: translateY(0);
    }
    .dropdown-menu button, .dropdown-menu a {
      display: block;
      width: 100%;
      padding: 0.6rem 1rem;
      background: none;
      border: none;
      color: var(--text-primary);
      text-align: left;
      cursor: pointer;
      transition: background 0.2s;
      text-decoration: none;
      font-size: 0.95rem;
    }
    .dropdown-menu button:hover, .dropdown-menu a:hover {
      background: var(--hover-bg);
    }
    .dropdown-menu .delete-btn {
      color: var(--danger-color);
    }
    /* --- Modal Base Styles (Pop-up from bottom) --- */
    .modal {
      display: none;
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      max-width: 95vw;
      max-height: 90vh;
      margin: 0 auto;
      background: var(--card-bg);
      z-index: 9000;
      box-shadow: 0 -8px 32px rgba(0,0,0,0.4);
      border-top-left-radius: 1.5rem;
      border-top-right-radius: 1.5rem;
      padding: 2.5rem 1.5rem 1rem;
      transform: translateY(100%);
      transition: transform 0.4s cubic-bezier(0.5,1.6,0.4,0.9);
      overflow-y: auto;
    }
    .modal.active {
      display: flex;
      flex-direction: column;
      transform: translateY(0);
    }
    .close-btn {
      position: absolute;
      right: 18px;
      top: 18px;
      font-size: 1.8rem;
      background: none;
      border: none;
      color: var(--text-secondary);
      cursor: pointer;
      transition: color 0.2s;
    }
    .close-btn:hover {
      color: var(--danger-color);
    }
    .modal h3 {
      margin-top: 0;
      color: var(--primary-color);
      margin-bottom: 1.5rem;
      font-size: 1.4rem;
      font-weight: 600;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 0.5rem;
    }
    /* --- Like/Comment Block Styles --- */
    .like-block, .comment-block {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1rem;
      padding: 0.75rem;
      border-radius: 8px;
      background: var(--hover-bg);
      position: relative;
    }
    .like-block img, .comment-block img {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
      flex-shrink: 0;
    }
    .like-content, .comment-content {
      flex: 1;
      min-width: 0;
    }
    .like-author a, .comment-author a {
      font-weight: 600;
      color: var(--primary-color);
      text-decoration: none;
      font-size: 1rem;
    }
    .comment-text {
      color: var(--text-secondary);
      margin: 0.25rem 0;
      word-break: break-word;
    }
    .comment-time {
      font-size: 0.8rem;
      color: #6c757d;
      display: flex;
      align-items: center;
      gap: 0.3rem;
    }
    /* --- Comment Specific Styles --- */
    .comment-actions {
      display: flex;
      gap: 0.75rem;
      margin-top: 0.5rem;
    }
    .comment-action-btn {
      background: none;
      border: none;
      color: var(--text-secondary);
      font-size: 0.9rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.3rem;
      transition: color 0.2s;
    }
    .comment-action-btn:hover { color: var(--primary-color); }
    .comment-action-btn.liked { color: var(--danger-color); }
    .comment-replies {
      margin-top: 1rem;
      padding-left: 1.5rem;
      border-left: 2px solid var(--border-color);
    }
    .comment-reply-form {
      margin-top: 1rem;
      background: var(--secondary-color);
      padding: 1rem;
      border-radius: 8px;
    }
    .post-comment-form {
      flex-shrink: 0;
      border-top: 1px solid var(--border-color);
      padding-top: 1rem;
    }
    .post-comment-form textarea {
      width: 100%;
      padding: 0.75rem;
      border-radius: 6px;
      background: #34495e;
      color: var(--text-primary);
      border: 1px solid #4a637d;
      resize: vertical;
      min-height: 60px;
      margin-bottom: 0.5rem;
    }
    .post-comment-form button {
      padding: 0.6rem 1.2rem;
      background: #3498db;
      color: #fff;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
    }
    /* --- Share Modal --- */
    #shareModal {
      max-width: 350px;
      padding: 1.5rem;
    }
    .share-options {
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
    }
    .share-btn {
      padding: 0.6rem;
      background: var(--secondary-color);
      color: var(--text-primary);
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background 0.2s;
    }
    .share-btn:hover { background: var(--primary-color); }

    /* --- Media Queries --- */
    @media (min-width: 769px) {
      .modal {
        max-width: 700px;
        left: 50%;
        transform: translate(-50%, 100%);
      }
      .modal.active {
        transform: translate(-50%, 0);
      }
    }
    @media (max-width: 600px) {
      .main-container {
        padding: 3.5rem 0.5rem 1.2rem;
      }
      h1 {
        font-size: 1.8rem;
      }
      .blog-card {
        padding: 1rem;
        border-radius: 1rem;
      }
      .blog-title {
        font-size: 1.3rem;
      }
      .blog-excerpt {
        font-size: 0.95rem;
      }
      .blog-actions-stats {
        gap: 0.5rem;
      }
      .action-btn, .stat-link, .follow-btn, .read-more-btn {
        padding: 0.5rem 1rem;
        font-size: 0.85rem;
      }
      .stat-link img { width: 20px; height: 20px; }
      .modal {
        max-width: 100vw;
        left: 0;
        border-radius: 0;
        padding: 2rem 1rem 1rem;
      }
      .modal.active {
        transform: translateY(0);
      }
    }
  </style>
</head>
<body>
  <%- include('partials/header', { user }) %>
  
  <div class="main-container">
    <h1><i class="fas fa-newspaper"></i> Latest Articles</h1>
    
    <% if (success_msg) { %>
      <div class="alert alert-success"><i class="fas fa-check-circle"></i> <%= success_msg %></div>
    <% } %>
    <% if (error_msg) { %>
      <div class="alert alert-error"><i class="fas fa-exclamation-circle"></i> <%= error_msg %></div>
    <% } %>
    
    <div class="blogs-list">
      <% if (blogs.length === 0) { %>
        <div style="color:var(--text-secondary); font-size:1.1rem; text-align:center; padding:3rem; background:var(--card-bg); border-radius:1rem;">
          <i class="fas fa-box-open" style="font-size:2rem; color:var(--primary-color); margin-bottom:0.5rem;"></i>
          <p>No public blogs found. Be the first to <a href="/blog/addBlog" style="color:var(--primary-color); text-decoration:underline;">create a blog</a>!</p>
        </div>
      <% } %>
      
      <% blogs.forEach(blog => { %>
        <div class="blog-card" data-blog-id="<%= blog._id %>">
          
          <% if (blog.coverImage) { %>
            <img src="<%= blog.coverImage %>" alt="Cover Image" class="blog-cover">
          <% } %>
          
          <div class="author-section">
            <img src="<%= blog.createdBy.profileImageURL %>" alt="Profile Image" class="author-img">
            <div class="author-details">
              <a href="/profile/<%= blog.createdBy._id %>"><%= blog.createdBy.fullname %></a>
              <span class="blog-date">
                <i class="fas fa-clock"></i> <%= moment(blog.createdAt).fromNow() %>
              </span>
            </div>
          </div>
          
          <div class="blog-title">
            <a href="/blog/<%= blog._id %>"><%= blog.title %></a>
          </div>
          
          <div class="blog-excerpt">
            <%= blog.body.length > 200 ? blog.body.substring(0, 200) + "..." : blog.body %>
            <a href="/blog/<%= blog._id %>">Read more</a>
          </div>
          
          <div class="blog-actions-stats">
            <% if (user) { %>
              <button type="button" class="action-btn ajax-like-btn <%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'liked' : '' %>" data-blog-id="<%= blog._id %>" data-liked="<%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'true' : 'false' %>">
                <i class="fas <%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'fa-heart' : 'fa-heart-o' %>"></i>
                <span class="like-text"><%= blog.likes.some(like => like._id.toString() === user._id.toString()) ? 'Unlike' : 'Like' %></span>
              </button>
              
              <% if (!blog.isOwn) { %>
                <button type="button" class="follow-btn ajax-follow-btn <%= blog.followStatus === 'following' ? 'following' : blog.followStatus === 'requested' ? 'requested cancel' : '' %>" data-user-id="<%= blog.createdBy._id %>" data-follow-status="<%= blog.followStatus %>">
                  <i class="fas <%= blog.followStatus === 'following' ? 'fa-user-minus' : blog.followStatus === 'requested' ? 'fa-user-times' : 'fa-user-plus' %>"></i>
                  <%= blog.followStatus === 'following' ? 'Unfollow' : blog.followStatus === 'requested' ? 'Pending' : 'Follow' %>
                </button>
              <% } %>
            <% } %>

            <button type="button" class="stat-link" onclick="showLikes('<%= blog._id %>')">
              <i class="fas fa-heart"></i>
              <span class="likes-count-val"><%= blog.likes.length %></span> Likes
            </button>
            
            <button type="button" class="stat-link" onclick="showComments('<%= blog._id %>')">
              <i class="fas fa-comments"></i>
              <span class="comments-count-val"><%= blog.totalComments %></span> Comments
            </button>
            
            <a href="/blog/<%= blog._id %>" class="read-more-btn">
              <i class="fas fa-book-open"></i> Read Full
            </a>
          </div>
          
          <div class="blog-menu">
            <button class="dots-btn" onclick="toggleMenu('<%= blog._id %>')">
              <i class="fas fa-ellipsis-v"></i>
            </button>
            <div class="dropdown-menu" id="menu-<%= blog._id %>">
              <% if (blog.isOwn) { %>
                <form action="/blog/<%= blog._id %>?_method=DELETE" method="POST" style="margin:0;" onsubmit="return confirm('Are you sure you want to delete this blog?');">
                  <button type="submit" class="delete-btn"><i class="fas fa-trash"></i> Delete Post</button>
                </form>
              <% } %>
              <button onclick="openShare('<%= blog._id %>')"><i class="fas fa-share-alt"></i> Share Post</button>
            </div>
          </div>

          <div id="likesModal-<%= blog._id %>" class="modal">
            <button class="close-btn" onclick="hideLikes('<%= blog._id %>')">&times;</button>
            <h3><i class="fas fa-heart"></i> Likes</h3>
            <div class="modal-content-list">
              <% if (blog.likes.length === 0) { %>
                <div style="color:var(--text-secondary);padding:1rem;">No one has liked this post yet.</div>
              <% } %>
              <% blog.likes.forEach(liker => { %>
                <div class="like-block">
                  <img src="<%= liker.profileImageURL %>" alt="Profile Image">
                  <div class="like-content">
                    <div class="like-author">
                      <a href="/profile/<%= liker._id %>"><%= liker.fullname %></a>
                    </div>
                    <% if (user && liker._id.toString() !== user._id.toString()) { %>
                      <button class="follow-btn <%= liker.followStatus === 'following' ? 'following' : liker.followStatus === 'requested' ? 'requested cancel' : '' %> ajax-follow-btn" type="button" data-user-id="<%= liker._id %>" data-follow-status="<%= liker.followStatus %>" style="margin-top: 0.5rem; padding: 0.4rem 0.8rem; font-size: 0.85rem;">
                        <i class="fas <%= liker.followStatus === 'following' ? 'fa-user-minus' : liker.followStatus === 'requested' ? 'fa-user-times' : 'fa-user-plus' %>"></i>
                        <%= liker.followStatus === 'following' ? 'Unfollow' : liker.followStatus === 'requested' ? 'Pending' : 'Follow' %>
                      </button>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>
          
          <div id="commentsModal-<%= blog._id %>" class="modal">
            <button class="close-btn" onclick="hideComments('<%= blog._id %>')">&times;</button>
            <h3><i class="fas fa-comments"></i> Comments (<span class="comments-total-count"><%= blog.totalComments %></span>)</h3>
            <div class="modal-content-list comments-container">
              <% if (blog.comments.length === 0) { %>
                <div class="no-comments-message" style="color:var(--text-secondary);padding:1rem;">No comments yet. Start the conversation!</div>
              <% } %>
              <div class="comments-list-wrapper">
                <% blog.comments.forEach(comment => { %>
                  <div class="comment-block" data-comment-id="<%= comment._id %>">
                    <img src="<%= comment.createdBy.profileImageURL %>" alt="Profile Image">
                    <div class="comment-content">
                      <div class="comment-author">
                        <a href="/profile/<%= comment.createdBy._id %>"><%= comment.createdBy.fullname %></a>
                      </div>
                      <div class="comment-text"><%= comment.content %></div>
                      <div class="comment-time"><i class="fas fa-clock"></i> <%= moment(comment.createdAt).fromNow() %></div>
                      <div class="comment-actions">
                        <% if (user) { %>
                          <button class="comment-action-btn like-comment-btn <%= comment.likes.some(l => l._id.toString() === user._id.toString()) ? 'liked' : '' %>" data-comment-id="<%= comment._id %>">
                            <i class="fas fa-heart"></i>
                            <span class="like-count"><%= comment.likes.length %></span>
                          </button>
                          <button class="comment-action-btn reply-btn" data-comment-id="<%= comment._id %>">
                            <i class="fas fa-reply"></i> Reply
                          </button>
                        <% } %>
                        <span class="reply-count"><i class="fas fa-reply-all"></i> <%= comment.replies ? comment.replies.length : 0 %></span>
                      </div>
                      <div class="comment-replies">
                        <% if (comment.replies && comment.replies.length > 0) { %>
                          <% comment.replies.forEach(reply => { %>
                            <div class="comment-block reply-block" data-comment-id="<%= reply._id %>">
                              <img src="<%= reply.createdBy.profileImageURL %>" alt="Profile Image">
                              <div class="comment-content">
                                <div class="comment-author">
                                  <a href="/profile/<%= reply.createdBy._id %>"><%= reply.createdBy.fullname %></a>
                                </div>
                                <div class="comment-text"><%= reply.content %></div>
                                <div class="comment-time"><i class="fas fa-clock"></i> <%= moment(reply.createdAt).fromNow() %></div>
                                <div class="comment-actions">
                                  <% if (user) { %>
                                    <button class="comment-action-btn like-comment-btn <%= reply.likes.some(l => l._id.toString() === user._id.toString()) ? 'liked' : '' %>" data-comment-id="<%= reply._id %>">
                                      <i class="fas fa-heart"></i>
                                      <span class="like-count"><%= reply.likes.length %></span>
                                    </button>
                                  <% } %>
                                </div>
                              </div>
                              <div class="comment-menu">
                                <button class="dots-btn" onclick="toggleCommentMenu('<%= reply._id %>')"><i class="fas fa-ellipsis-v"></i></button>
                                <div class="dropdown-menu" id="comment-menu-<%= reply._id %>">
                                  <% if (user && reply.createdBy._id.toString() === user._id.toString()) { %>
                                    <button type="button" class="delete-btn delete-comment-btn" data-comment-id="<%= reply._id %>"><i class="fas fa-trash"></i> Delete</button>
                                  <% } %>
                                </div>
                              </div>
                            </div>
                          <% }) %>
                        <% } %>
                      </div>
                      <div class="reply-form-container"></div>
                    </div>
                    <div class="comment-menu">
                      <button class="dots-btn" onclick="toggleCommentMenu('<%= comment._id %>')"><i class="fas fa-ellipsis-v"></i></button>
                      <div class="dropdown-menu" id="comment-menu-<%= comment._id %>">
                        <% if (user && comment.createdBy._id.toString() === user._id.toString()) { %>
                          <button type="button" class="delete-btn delete-comment-btn" data-comment-id="<%= comment._id %>"><i class="fas fa-trash"></i> Delete</button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                <% }) %>
              </div>
            </div>
            <% if (user) { %>
              <form action="/comment/<%= blog._id %>" method="POST" class="post-comment-form ajax-comment-form" data-blog-id="<%= blog._id %>">
                <textarea name="content" required placeholder="Write a comment…" rows="3"></textarea>
                <button type="submit">
                  <i class="fas fa-paper-plane"></i> Post Comment
                </button>
              </form>
            <% } %>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
  
  <div id="shareModal" class="modal">
    <button class="close-btn" onclick="closeShare()">&times;</button>
    <h3><i class="fas fa-share-alt"></i> Share Blog</h3>
    <div class="share-options">
      <button class="share-btn" id="share-facebook"><i class="fab fa-facebook"></i> Share on Facebook</button>
      <button class="share-btn" id="share-twitter"><i class="fab fa-twitter"></i> Share on X</button>
      <button class="share-btn" id="share-whatsapp"><i class="fab fa-whatsapp"></i> Share on WhatsApp</button>
      <button class="share-btn" id="copy-link"><i class="fas fa-copy"></i> Copy Link</button>
    </div>
  </div>
  
  <script>
    let currentBlogId = null;

    function toggleMenu(id) {
      const menu = document.getElementById(`menu-${id}`);
      if (menu) {
        document.querySelectorAll('.dropdown-menu').forEach(m => {
          if (m.id !== `menu-${id}`) m.classList.remove('active');
        });
        menu.classList.toggle('active');
      }
    }

    function toggleCommentMenu(id) {
      const menu = document.getElementById(`comment-menu-${id}`);
      if (menu) {
        document.querySelectorAll('.dropdown-menu').forEach(m => {
          if (m.id !== `comment-menu-${id}`) m.classList.remove('active');
        });
        menu.classList.toggle('active');
      }
    }

    function openShare(id) {
      currentBlogId = id;
      const modal = document.getElementById('shareModal');
      modal.style.display = 'flex';
      setTimeout(() => { modal.classList.add('active'); }, 8);
      
      const link = `${window.location.origin}/blog/${id}`;
      document.getElementById('share-facebook').onclick = () => window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(link)}`, '_blank');
      document.getElementById('share-twitter').onclick = () => window.open(`https://twitter.com/intent/tweet?url=${encodeURIComponent(link)}&text=${encodeURIComponent(document.querySelector(`.blog-card[data-blog-id="${id}"] .blog-title a`).textContent)}`, '_blank');
      document.getElementById('share-whatsapp').onclick = () => window.open(`https://api.whatsapp.com/send?text=${encodeURIComponent(document.querySelector(`.blog-card[data-blog-id="${id}"] .blog-title a`).textContent + ' ' + link)}`, '_blank');
      document.getElementById('copy-link').onclick = () => {
        navigator.clipboard.writeText(link);
        alert('Link copied to clipboard!');
      };
    }

    function closeShare() {
      const modal = document.getElementById('shareModal');
      modal.classList.remove('active');
      setTimeout(() => { modal.style.display = 'none'; }, 400);
    }

    function showModal(id) {
      document.querySelectorAll('.modal.active').forEach(m => m.classList.remove('active'));
      let modal = document.getElementById(id);
      if (!modal) return;
      modal.style.display = 'flex';
      setTimeout(() => { modal.classList.add('active'); }, 8);
      document.body.style.overflow = 'hidden';
      // Center the modal if it's the share modal (or any other fixed-size modal)
      if(id === 'shareModal') {
          modal.style.left = '50%';
          modal.style.bottom = 'unset';
          modal.style.top = '50%';
          modal.style.transform = 'translate(-50%, 100%)';
      }
    }

    function hideModal(id) {
      let modal = document.getElementById(id);
      if (!modal) return;
      modal.classList.remove('active');
      setTimeout(() => { modal.style.display = 'none'; }, 400);
      document.body.style.overflow = '';
      document.querySelectorAll('.dropdown-menu').forEach(m => m.classList.remove('active'));
    }

    function showLikes(id) {
      hideModal(`commentsModal-${id}`);
      showModal(`likesModal-${id}`);
    }

    function hideLikes(id) {
      hideModal(`likesModal-${id}`);
    }
    
    function showComments(id) {
      hideModal(`likesModal-${id}`);
      showModal(`commentsModal-${id}`);
    }

    function hideComments(id) {
      hideModal(`commentsModal-${id}`);
    }

    document.addEventListener('click', (e) => {
      // Close dropdown menus
      if (!e.target.closest('.blog-menu') && !e.target.closest('.comment-menu')) {
        document.querySelectorAll('.dropdown-menu').forEach(menu => menu.classList.remove('active'));
      }
      // Close fixed modals on outside click
      document.querySelectorAll('.modal').forEach(modal => {
          if (modal.classList.contains('active') && !modal.contains(e.target) && e.target !== modal.querySelector('.close-btn')) {
              if(modal.id === 'shareModal') closeShare();
          }
      });
    });

    window.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        document.querySelectorAll('.dropdown-menu').forEach(menu => menu.classList.remove('active'));
        if(document.getElementById('shareModal')?.classList.contains('active')) closeShare();
        document.querySelectorAll('.modal.active').forEach(modal => hideModal(modal.id));
      }
    });

    /* --- AJAX Logic --- */
    document.addEventListener('DOMContentLoaded', () => {
      const handleFormSubmit = async (e, successCallback) => {
        e.preventDefault();
        const form = e.target;
        const blogId = form.dataset.blogId || form.closest('.modal')?.id.split('-')[1] || form.closest('.comment-block')?.dataset.blogId;
        const urlParams = new URLSearchParams(form.action.split('?')[1] || '');

        if (form.classList.contains('comment-reply-form')) {
            // Need to append blogId to reply URL for security checks on server
            form.action = form.action.split('?')[0] + `?blogId=${blogId}`;
        }

        try {
          const formData = new FormData(form);
          const response = await fetch(form.action, {
            method: 'POST',
            body: new URLSearchParams(formData),
            headers: { 
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          });
          if (response.ok) {
            const data = await response.json();
            successCallback(data, form, blogId);
          } else {
            const errorData = await response.json().catch(() => ({ error: 'Action failed' }));
            alert(errorData.error || 'Action failed. Please try again.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An unexpected error occurred.');
        }
      };

      // Helper to update blog's main comment count
      const updateBlogCommentCount = (blogId, delta) => {
        const blogCard = document.querySelector(`.blog-card[data-blog-id="${blogId}"]`);
        const countSpan = blogCard?.querySelector('.comments-count-val');
        const totalCountSpan = document.getElementById(`commentsModal-${blogId}`)?.querySelector('.comments-total-count');
        
        let currentCount = parseInt(countSpan?.textContent || 0);
        let currentTotalCount = parseInt(totalCountSpan?.textContent || 0);

        currentCount = Math.max(0, currentCount + delta);
        currentTotalCount = Math.max(0, currentTotalCount + delta);

        if (countSpan) countSpan.textContent = currentCount;
        if (totalCountSpan) totalCountSpan.textContent = currentTotalCount;
      };

      // AJAX for blog likes
      document.querySelectorAll('.ajax-like-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const blogId = button.dataset.blogId;
          let isLiked = button.dataset.liked === 'true';
          const countSpan = button.closest('.blog-card').querySelector('.likes-count-val');
          const likeText = button.querySelector('.like-text');

          try {
            const response = await fetch(`/blog/${blogId}/like`, {
              method: 'POST',
              headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/json' }
            });
            if (response.ok) {
              const data = await response.json();
              isLiked = data.isLiked;
              button.dataset.liked = isLiked ? 'true' : 'false';
              button.classList.toggle('liked');
              likeText.textContent = isLiked ? 'Unlike' : 'Like';
              button.querySelector('i').classList.toggle('fa-heart');
              button.querySelector('i').classList.toggle('fa-heart-o');
              if (countSpan) countSpan.textContent = data.likesCount;
              
              // Update Likes Modal (simplified update, for full accuracy re-fetch or use socket)
              // Since this is home, a simple re-render on next page load is often sufficient, 
              // but for a smooth experience, the modal should be updated.
              const modal = document.getElementById(`likesModal-${blogId}`);
              if (modal) {
                // In a production app, you'd insert/remove the liker's element here.
                // For simplicity, we just reload the page/modal content or hide it to force reload later.
                hideLikes(blogId); 
              }

            } else { console.error('Failed to like blog'); }
          } catch (error) { console.error('Error:', error); }
        });
      });

      // AJAX for follow/unfollow/cancel
      document.querySelectorAll('.ajax-follow-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const userId = button.dataset.userId;
          let currentStatus = button.dataset.followStatus;
          let endpoint = '';
          if (currentStatus === 'following') {
            endpoint = `/user/unfollow/${userId}`;
          } else if (currentStatus === 'requested') {
            endpoint = `/user/cancel-follow/${userId}`;
          } else {
            endpoint = `/user/follow/${userId}`;
          }

          try {
            const response = await fetch(endpoint, {
              method: 'POST', headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/json' }
            });
            if (response.ok) {
              const data = await response.json();
              currentStatus = data.newStatus;
              
              document.querySelectorAll(`[data-user-id="${userId}"]`).forEach(btn => {
                btn.dataset.followStatus = currentStatus;
                btn.classList.remove('following', 'requested', 'cancel');
                btn.querySelector('i').classList.remove('fa-user-minus', 'fa-user-times', 'fa-user-plus');
                
                if (currentStatus === 'following') {
                  btn.querySelector('i').classList.add('fa-user-minus');
                  btn.innerHTML = btn.innerHTML.replace(/(Unfollow|Pending|Follow)/, 'Unfollow');
                  btn.classList.add('following');
                } else if (currentStatus === 'requested') {
                  btn.querySelector('i').classList.add('fa-user-times');
                  btn.innerHTML = btn.innerHTML.replace(/(Unfollow|Pending|Follow)/, 'Pending');
                  btn.classList.add('requested', 'cancel');
                } else {
                  btn.querySelector('i').classList.add('fa-user-plus');
                  btn.innerHTML = btn.innerHTML.replace(/(Unfollow|Pending|Follow)/, 'Follow');
                }
              });
            } else { console.error('Failed to update follow status'); }
          } catch (error) { console.error('Error:', error); }
        });
      });

      // Like/Unlike a comment/reply (Delegated Event)
      document.addEventListener('click', async (e) => {
        const button = e.target.closest('.like-comment-btn');
        if (button) {
          const commentId = button.dataset.commentId;
          const isLiked = button.classList.contains('liked');
          const likeCountSpan = button.querySelector('.like-count');

          try {
            const response = await fetch(`/comment/${commentId}/like`, {
              method: isLiked ? 'DELETE' : 'POST',
              headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/json' }
            });

            if (response.ok) {
              const data = await response.json();
              button.classList.toggle('liked');
              likeCountSpan.textContent = data.likesCount;
            } else { console.error('Failed to like comment'); }
          } catch (error) { console.error('Error during fetch:', error); }
        }
      });

      // Delete a comment or reply (Delegated Event)
      document.addEventListener('click', async (e) => {
        const button = e.target.closest('.delete-comment-btn');
        if (button) {
          if (!confirm('Are you sure you want to delete this?')) return;

          const commentId = button.dataset.commentId;
          const commentBlock = button.closest('.comment-block');
          const isReply = commentBlock.parentElement.classList.contains('comment-replies');
          const repliesContainer = commentBlock.querySelector('.comment-replies');
          const replyCount = repliesContainer ? repliesContainer.querySelectorAll('.comment-block.reply-block').length : 0;
          const deletedCount = isReply ? 1 : 1 + replyCount;
          const blogId = button.closest('.modal')?.id.split('-')[1];

          try {
            const response = await fetch(`/comment/${commentId}`, {
              method: 'DELETE', headers: { 'X-Requested-With': 'XMLHttpRequest' }
            });

            if (response.ok) {
              commentBlock.remove();
              updateBlogCommentCount(blogId, -deletedCount);

              const commentsListWrapper = button.closest('.comments-list-wrapper');
              if (commentsListWrapper.querySelectorAll('.comment-block').length === 0) {
                const modalBody = button.closest('.modal-content-list');
                if (modalBody) modalBody.innerHTML = '<div class="no-comments-message" style="color:var(--text-secondary);padding:1rem;">No comments yet. Start the conversation!</div>';
              }
            } else { alert('Failed to delete'); }
          } catch (error) { alert('An error occurred'); }
        }
      });

      // Show Reply Form (Delegated Event)
      document.addEventListener('click', (e) => {
        const button = e.target.closest('.reply-btn');
        if (button) {
          const commentBlock = button.closest('.comment-block');
          const replyFormContainer = commentBlock.querySelector('.reply-form-container');
          const commentId = button.dataset.commentId;
          const blogId = button.closest('.modal').id.split('-')[1];

          document.querySelectorAll('.reply-form-container').forEach(container => container.innerHTML = '');

          const replyFormHtml = `
            <form action="/comment/reply/${commentId}" method="POST" class="comment-reply-form" data-blog-id="${blogId}">
              <textarea name="content" required placeholder="Write a reply…" rows="2"
                        style="width:100%; padding:.6rem; border-radius:4px; background:#2c3e50; color:#ecf0f1; border:1px solid #34495e; margin-bottom: 0.5rem;"></textarea>
              <button type="submit" style="padding:.5rem 1rem; background:#3498db; border:none; border-radius:4px; color:#fff; cursor:pointer;">
                Post Reply
              </button>
            </form>
          `;
          replyFormContainer.innerHTML = replyFormHtml;

          const newForm = replyFormContainer.querySelector('form');
          if (newForm) {
            newForm.querySelector('textarea')?.focus();
            
            newForm.addEventListener('submit', (e) => {
              handleFormSubmit(e, (data, form, postId) => {
                if (data.success) {
                  const newReply = data.newReply;
                  const parentCommentBlock = form.closest('.comment-block');
                  const repliesContainer = parentCommentBlock.querySelector('.comment-replies');
                  
                  const replyHtml = `
                    <div class="comment-block reply-block" data-comment-id="${newReply._id}">
                      <img src="${newReply.createdBy.profileImageURL}" alt="Profile Image">
                      <div class="comment-content">
                        <div class="comment-author">
                          <a href="/profile/${newReply.createdBy._id}">${newReply.createdBy.fullname}</a>
                        </div>
                        <div class="comment-text">${newReply.content}</div>
                        <div class="comment-time"><i class="fas fa-clock"></i> Just now</div>
                        <div class="comment-actions">
                          <button class="comment-action-btn like-comment-btn" data-comment-id="${newReply._id}">
                            <i class="fas fa-heart"></i>
                            <span class="like-count">0</span>
                          </button>
                        </div>
                      </div>
                      <div class="comment-menu">
                        <button class="dots-btn" onclick="toggleCommentMenu('${newReply._id}')"><i class="fas fa-ellipsis-v"></i></button>
                        <div class="dropdown-menu" id="comment-menu-${newReply._id}">
                          <button type="button" class="delete-btn delete-comment-btn" data-comment-id="${newReply._id}"><i class="fas fa-trash"></i> Delete</button>
                        </div>
                      </div>
                    </div>
                  `;
                  repliesContainer.innerHTML += replyHtml;
                  form.remove();

                  updateBlogCommentCount(postId, 1);
                  const replyCountSpan = button.closest('.comment-actions').querySelector('.reply-count');
                  const currentReplyCount = parseInt(replyCountSpan.textContent.match(/\d+/)[0]);
                  replyCountSpan.innerHTML = `<i class="fas fa-reply-all"></i> ${currentReplyCount + 1}`;
                } else { alert('Failed to post reply.'); }
              });
            });
          }
        }
      });

      // Handle main comment form submission
      document.querySelectorAll('.ajax-comment-form').forEach(form => {
        form.addEventListener('submit', (e) => {
          handleFormSubmit(e, (data, form, blogId) => {
            if (data.success) {
              const newComment = data.newComment;
              const commentsListWrapper = form.closest('.modal').querySelector('.comments-list-wrapper');

              // Remove "No comments yet" if present
              form.closest('.modal').querySelector('.no-comments-message')?.remove();
              
              const newCommentHtml = `
                <div class="comment-block" data-comment-id="${newComment._id}">
                  <img src="${newComment.createdBy.profileImageURL}" alt="Profile Image">
                  <div class="comment-content">
                    <div class="comment-author">
                      <a href="/profile/${newComment.createdBy._id}">${newComment.createdBy.fullname}</a>
                    </div>
                    <div class="comment-text">${newComment.content}</div>
                    <div class="comment-time"><i class="fas fa-clock"></i> Just now</div>
                    <div class="comment-actions">
                      <button class="comment-action-btn like-comment-btn" data-comment-id="${newComment._id}">
                        <i class="fas fa-heart"></i>
                        <span class="like-count">0</span>
                      </button>
                      <button class="comment-action-btn reply-btn" data-comment-id="${newComment._id}">
                        <i class="fas fa-reply"></i> Reply
                      </button>
                      <span class="reply-count"><i class="fas fa-reply-all"></i> 0</span>
                    </div>
                    <div class="comment-replies"></div>
                    <div class="reply-form-container"></div>
                  </div>
                  <div class="comment-menu">
                    <button class="dots-btn" onclick="toggleCommentMenu('${newComment._id}')"><i class="fas fa-ellipsis-v"></i></button>
                    <div class="dropdown-menu" id="comment-menu-${newComment._id}">
                      <button type="button" class="delete-btn delete-comment-btn" data-comment-id="${newComment._id}"><i class="fas fa-trash"></i> Delete</button>
                    </div>
                  </div>
                </div>
              `;
              commentsListWrapper.innerHTML += newCommentHtml;
              form.querySelector('textarea').value = '';

              updateBlogCommentCount(blogId, 1);
            } else { alert('Failed to post comment.'); }
          });
        });
      });
    });
  </script>
</body>
</html>
