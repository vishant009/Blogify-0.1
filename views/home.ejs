<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Modern Blog — Home | Blogify</title>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
  :root{
    --bg:#000000; /* black background as requested */
    --card:#0b0b0b;
    --muted:#9ca3af;
    --accent:#2563eb;
    --accent-2:#06b6d4;
    --success:#10b981;
    --shadow: 0 6px 24px rgba(2,6,23,0.6);
    --radius:12px;
    --max:1100px;
    --text: #e6eef8;
  }
  *{box-sizing:border-box}
  body{
    margin:0;
    font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;
    background:var(--bg);
    color:var(--text);
    -webkit-font-smoothing:antialiased;
  }

  /* Page container */
  .wrap{
    max-width:var(--max);
    margin:36px auto;
    padding:20px;
    display:grid;
    grid-template-columns: 1fr 340px;
    gap:28px;
  }

  /* Main article card */
  .article{
    background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
    border-radius:var(--radius);
    box-shadow:var(--shadow);
    overflow:hidden;
    border: 1px solid rgba(255,255,255,0.04);
  }
  .article-header{
    padding:28px;
    border-bottom:1px solid rgba(255,255,255,0.03);
  }
  .kicker{
    display:inline-block;
    font-size:12px;
    color:var(--accent);
    font-weight:600;
    background:rgba(37,99,235,0.06);
    padding:6px 10px;
    border-radius:999px;
    margin-bottom:12px;
  }
  .title{
    font-size:24px;
    font-weight:700;
    margin:6px 0 8px;
    color:var(--text);
  }
  .meta{
    display:flex;
    gap:12px;
    align-items:center;
    color:var(--muted);
    font-size:14px;
  }
  .meta img{
    width:36px;height:36px;border-radius:50%;
    object-fit:cover;border:2px solid rgba(255,255,255,0.02);box-shadow:0 2px 6px rgba(2,6,23,0.5);
  }

  .hero-img{
    width:100%;
    height:320px;
    object-fit:cover;
    display:block;
  }

  .article-body{
    padding:22px 28px 28px;
    color:var(--text);
    line-height:1.65;
    font-size:16px;
    background: transparent;
  }
  .article-body p{margin:0 0 14px}

  /* Actions */
  .article-actions{
    display:flex;
    gap:12px;
    align-items:center;
    margin-top:12px;
  }
  .btn {
    display:inline-flex;
    align-items:center;
    gap:8px;
    padding:8px 12px;
    border-radius:10px;
    font-weight:600;
    font-size:14px;
    cursor:pointer;
    border: none;
    background:transparent;
    color:var(--text);
  }
  .btn.like {
    color:var(--accent);
    border:1px solid rgba(37,99,235,0.12);
    background: linear-gradient(90deg, rgba(37,99,235,0.06), transparent);
  }
  .btn.subscribe {
    color:#fff;
    background:linear-gradient(90deg,var(--accent),var(--accent-2));
    box-shadow: 0 6px 18px rgba(37,99,235,0.14);
  }

  /* Right column (sidebar) */
  .sidebar{
    position:sticky;
    top:24px;
    align-self:start;
    display:flex;
    flex-direction:column;
    gap:16px;
  }
  .card{
    background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
    border-radius:12px;
    padding:14px;
    box-shadow:var(--shadow);
    border: 1px solid rgba(255,255,255,0.03);
  }
  .subscribe-h{
    font-weight:700;
    font-size:16px;
    margin-bottom:6px;
    color:var(--text);
  }
  .subs-desc{
    color:var(--muted);
    font-size:14px;
    margin-bottom:12px;
  }

  /* Comments area */
  .comments {
    margin-top:18px;
  }
  .comment-form{
    display:flex;
    gap:12px;
    align-items:flex-start;
    margin-bottom:10px;
  }
  .comment-form textarea{
    flex:1;
    min-height:72px;
    padding:12px;
    border-radius:10px;
    border:1px solid rgba(255,255,255,0.04);
    resize:vertical;
    background:#05060a;
    color:var(--text);
    font-size:14px;
  }
  .comment-form .submit{
    align-self:flex-end;
  }

  .comment-list{
    margin-top:14px;
    display:flex;
    flex-direction:column;
    gap:12px;
  }

  .comment{
    display:flex;
    gap:12px;
    align-items:flex-start;
    padding:12px;
    border-radius:10px;
    background:linear-gradient(180deg, rgba(255,255,255,0.01), transparent);
    border: 1px solid rgba(255,255,255,0.02);
  }
  .comment .avatar{
    width:44px;height:44px;border-radius:50%;overflow:hidden;flex-shrink:0;
  }
  .comment-body{
    flex:1;
  }
  .comment-top{
    display:flex;
    justify-content:space-between;
    gap:12px;
    align-items:flex-start;
  }
  .comment-meta{
    font-weight:600;
    font-size:14px;
    margin-bottom:6px;
    color:var(--text);
  }
  .comment-time{
    color:var(--muted);
    font-size:13px;
  }
  .comment-text{
    color:var(--text);
    font-size:15px;
    margin-bottom:8px;
  }

  .comment-actions{
    display:flex;
    gap:10px;
    align-items:center;
    color:var(--muted);
    font-size:13px;
  }
  .comment-actions button{
    border:none;background:transparent;cursor:pointer;padding:6px;border-radius:8px;color:var(--muted);
  }
  .comment-actions button:hover{background:rgba(255,255,255,0.02)}

  .reply-list{margin-top:10px;padding-left:56px;display:flex;flex-direction:column;gap:10px}

  .small{
    font-size:13px;color:var(--muted);
  }

  /* utilities */
  .muted{color:var(--muted)}
  .flex{display:flex;align-items:center;gap:8px}
  .center{display:flex;align-items:center;justify-content:center}
  .pill{
    background:rgba(255,255,255,0.02);
    padding:6px 10px;border-radius:999px;font-weight:600;font-size:13px;color:var(--muted)
  }

  /* responsive */
  @media (max-width:980px){
    .wrap{grid-template-columns: 1fr; padding:16px}
    .sidebar{position:static}
    .hero-img{height:220px}
  }

  /* focus outline for keyboard users */
  body.show-focus :focus { outline: 2px solid rgba(37,99,235,0.6); outline-offset: 3px; border-radius: 6px; }
</style>
</head>
<body>

  <!-- keep your existing header (if any) so auth nav stays consistent -->
  <%- include('partials/header', { user }) %>

<div class="wrap">

  <!-- MAIN ARTICLE -->
  <main>
    <article class="article" aria-labelledby="post-title">

      <div class="article-header">
        <span class="kicker">Tech · Tutorial</span>
        <h1 id="post-title" class="title">How to Build a High-Quality Blog Frontend (Client-side)</h1>

        <div class="meta" style="margin-top:10px;">
          <img src="https://i.pravatar.cc/100?img=12" alt="Author avatar">
          <div style="display:flex;flex-direction:column;">
            <div style="font-weight:600">Vishant Velip</div>
            <div class="small muted">Oct 30, 2025 • 8 min read</div>
          </div>
        </div>

        <div class="article-actions" style="margin-top:14px;">
          <button id="likePostBtn" class="btn like" aria-pressed="false"><i class="fa-regular fa-heart"></i> <span id="postLikeCount">0</span></button>
          <button id="subscribeBtn" class="btn subscribe" title="Subscribe to the author">Subscribe</button>
        </div>
      </div>

      <img class="hero-img" src="https://images.unsplash.com/photo-1503676260728-1c00da094a0b?q=80&w=1600&auto=format&fit=crop&ixlib=rb-4.0.3&s=1a7a9932e150d1c07b4b3f5b8a7b3a9b" alt="Hero image">

      <div class="article-body">
        <p>This example demonstrates a robust frontend-only blog post UI with a comments system implemented in vanilla JavaScript. It includes: add comment, reply, like comment, delete comment, post like and subscribe button. Comments persist in <code>localStorage</code> for demo purposes.</p>
        <p>Use this UI as a starting point and connect the actions to your server APIs to make them real (create, delete, like, subscribe endpoints).</p>

        <section class="comments" aria-label="Comments section">
          <h2 style="margin-bottom:8px">Discussion</h2>

          <!-- New comment -->
          <div class="card comment-form" aria-live="polite">
            <img class="avatar" src="https://i.pravatar.cc/60?img=3" alt="you">
            <div style="flex:1">
              <textarea id="newCommentText" placeholder="Write a thoughtful comment..." aria-label="Write a comment"></textarea>
              <div style="display:flex;justify-content:flex-end;margin-top:8px;">
                <button id="addCommentBtn" class="btn subscribe" aria-label="Post comment">Post Comment</button>
              </div>
            </div>
          </div>

          <!-- Comments list -->
          <div class="comment-list card" id="commentsContainer" style="padding:12px 14px;">
            <!-- JS will render comments here -->
            <div id="noComments" class="center muted" style="padding:28px 0;">Be the first to comment.</div>
          </div>
        </section>
      </div>

    </article>
  </main>

  <!-- SIDEBAR -->
  <aside class="sidebar" aria-label="Sidebar">
    <div class="card">
      <div class="subscribe-h">Subscribe to the newsletter</div>
      <div class="subs-desc">Get weekly articles and tutorials about web development, UI, and design.</div>
      <div style="display:flex;gap:8px">
        <input id="emailField" type="email" placeholder="Your email" style="flex:1;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:#05060a;color:var(--text)">
        <button id="subscribeEmailBtn" class="btn subscribe">Subscribe</button>
      </div>
      <div style="margin-top:10px" class="small muted">No spam — unsubscribe anytime.</div>
    </div>

    <div class="card">
      <div style="display:flex;justify-content:space-between;align-items:center">
        <div style="font-weight:700">About the author</div>
        <div class="pill">Top writer</div>
      </div>
      <div style="display:flex;gap:12px;margin-top:12px;align-items:center">
        <img src="https://i.pravatar.cc/80?img=12" alt="avatar" style="width:64px;height:64px;border-radius:12px">
        <div>
          <div style="font-weight:700">Vishant Velip</div>
          <div class="small muted">Frontend engineer & designer</div>
        </div>
      </div>
      <p class="small muted" style="margin-top:12px">I write about modern UI, JavaScript and building fast, maintainable frontends.</p>
      <div style="margin-top:12px;display:flex;gap:8px">
        <button class="btn" aria-label="twitter"><i class="fa-brands fa-twitter"></i></button>
        <button class="btn" aria-label="github"><i class="fa-brands fa-github"></i></button>
        <button class="btn" aria-label="linkedin"><i class="fa-brands fa-linkedin"></i></button>
      </div>
    </div>

  </aside>

</div>

<script>
/* -------------------------
  Client-side comment system (same as the demo you provided)
-------------------------*/

const currentUser = {
  id: 'user-you',
  name: 'You',
  avatar: 'https://i.pravatar.cc/60?img=3'
};

const LS_COMMENTS_KEY = 'demo_blog_comments_v1';
const LS_POST_LIKES = 'demo_blog_like_v1';
const LS_SUBSCRIBED = 'demo_blog_subscribed_v1';

const commentsContainer = document.getElementById('commentsContainer');
const noCommentsEl = document.getElementById('noComments');
const newCommentText = document.getElementById('newCommentText');
const addCommentBtn = document.getElementById('addCommentBtn');
const likePostBtn = document.getElementById('likePostBtn');
const postLikeCountEl = document.getElementById('postLikeCount');
const subscribeBtn = document.getElementById('subscribeBtn');
const emailField = document.getElementById('emailField');
const subscribeEmailBtn = document.getElementById('subscribeEmailBtn');

let comments = [];

function uid(prefix='id'){
  return prefix + '_' + Date.now().toString(36) + '_' + Math.floor(Math.random()*10000).toString(36);
}

function loadState(){
  try {
    const raw = localStorage.getItem(LS_COMMENTS_KEY);
    comments = raw ? JSON.parse(raw) : [];
  } catch(e){ comments = []; }

  const likes = parseInt(localStorage.getItem(LS_POST_LIKES) || '0', 10);
  postLikeCountEl.textContent = isNaN(likes) ? '0' : likes;

  const subscribed = localStorage.getItem(LS_SUBSCRIBED) === '1';
  if(subscribed){
    subscribeBtn.textContent = 'Subscribed';
    subscribeBtn.style.opacity = 0.9;
    subscribeBtn.disabled = false;
  }
}

function saveState(){
  localStorage.setItem(LS_COMMENTS_KEY, JSON.stringify(comments));
}

function timeAgo(ts){
  const s = Math.floor((Date.now() - ts)/1000);
  if(s < 60) return s + 's';
  if(s < 3600) return Math.floor(s/60) + 'm';
  if(s < 86400) return Math.floor(s/3600) + 'h';
  return Math.floor(s/86400) + 'd';
}

function renderComments(){
  commentsContainer.innerHTML = '';
  if(comments.length === 0){
    commentsContainer.appendChild(noCommentsEl);
    return;
  }
  // ensure noCommentsEl isn't duplicated
  if(noCommentsEl.parentNode === commentsContainer) noCommentsEl.remove();

  comments.forEach(c => {
    const el = renderCommentEl(c);
    commentsContainer.appendChild(el);
  });
}

function renderCommentEl(c){
  const wrapper = document.createElement('div');
  wrapper.className = 'comment';
  wrapper.dataset.id = c.id;

  const avatar = document.createElement('img');
  avatar.className = 'avatar';
  avatar.src = c.author.avatar;
  avatar.alt = c.author.name;

  const body = document.createElement('div');
  body.className = 'comment-body';

  const top = document.createElement('div');
  top.className = 'comment-top';

  const meta = document.createElement('div');
  meta.className = 'comment-meta';
  meta.textContent = c.author.name + ' ';
  const time = document.createElement('span');
  time.className = 'comment-time muted';
  time.textContent = ' • ' + timeAgo(c.createdAt);
  meta.appendChild(time);

  const actionsWrap = document.createElement('div');
  actionsWrap.className = 'comment-actions';

  const likeBtn = document.createElement('button');
  likeBtn.innerHTML = `<i class="fa-regular fa-thumbs-up"></i> <span>${c.likes||0}</span>`;
  likeBtn.title = 'Like';
  likeBtn.addEventListener('click', (e)=>{ e.stopPropagation(); toggleLike(c.id); });

  const replyBtn = document.createElement('button');
  replyBtn.innerHTML = `<i class="fa-regular fa-comment"></i> Reply`;
  replyBtn.title = 'Reply';
  replyBtn.addEventListener('click',(e)=>{ e.stopPropagation(); openReplyInput(c.id, wrapper); });

  const delBtn = document.createElement('button');
  delBtn.innerHTML = `<i class="fa-regular fa-trash-can"></i>`;
  delBtn.title = 'Delete';
  delBtn.addEventListener('click',(e)=>{ e.stopPropagation(); deleteComment(c.id); });

  actionsWrap.append(likeBtn, replyBtn, delBtn);

  top.append(meta, actionsWrap);

  const text = document.createElement('div');
  text.className = 'comment-text';
  text.textContent = c.text;

  body.append(top, text);

  if(Array.isArray(c.replies) && c.replies.length > 0){
    const repliesEl = document.createElement('div');
    repliesEl.className = 'reply-list';
    c.replies.forEach(r => {
      const rEl = document.createElement('div');
      rEl.className = 'comment';
      rEl.style.padding = '10px';
      rEl.style.background = 'transparent';

      const rAvatar = document.createElement('img');
      rAvatar.className = 'avatar';
      rAvatar.src = r.author.avatar;
      rAvatar.alt = r.author.name;

      const rBody = document.createElement('div');
      rBody.className = 'comment-body';

      const rTop = document.createElement('div');
      rTop.className = 'comment-top';

      const rMeta = document.createElement('div'); rMeta.className = 'comment-meta';
      rMeta.textContent = r.author.name;
      const rTime = document.createElement('span'); rTime.className = 'comment-time muted';
      rTime.textContent = ' • ' + timeAgo(r.createdAt);
      rMeta.appendChild(rTime);

      const rActions = document.createElement('div'); rActions.className = 'comment-actions';
      const rLike = document.createElement('button');
      rLike.innerHTML = `<i class="fa-regular fa-thumbs-up"></i> <span>${r.likes||0}</span>`;
      rLike.title='Like';
      rLike.addEventListener('click', ()=>{ toggleLike(c.id, r.id) });

      const rDel = document.createElement('button');
      rDel.innerHTML = `<i class="fa-regular fa-trash-can"></i>`;
      rDel.title='Delete';
      rDel.addEventListener('click', ()=>{ deleteReply(c.id, r.id) });

      rActions.append(rLike, rDel);

      rTop.append(rMeta, rActions);

      const rText = document.createElement('div'); rText.className='comment-text'; rText.textContent = r.text;

      rBody.append(rTop, rText);
      rEl.append(rAvatar, rBody);
      repliesEl.appendChild(rEl);
    });
    body.appendChild(repliesEl);
  }

  wrapper.append(avatar, body);
  return wrapper;
}

function addComment(text){
  const trimmed = (text || '').trim();
  if(!trimmed) return false;
  const c = {
    id: uid('c'),
    author: currentUser,
    text: trimmed,
    createdAt: Date.now(),
    likes: 0,
    replies: []
  };
  comments.unshift(c);
  saveState();
  renderComments();
  return true;
}

function addReply(parentId, text){
  const trimmed = (text || '').trim();
  if(!trimmed) return false;
  const parent = comments.find(cc => cc.id === parentId);
  if(!parent) return false;
  const r = {
    id: uid('r'),
    author: currentUser,
    text: trimmed,
    createdAt: Date.now(),
    likes: 0
  };
  parent.replies = parent.replies || [];
  parent.replies.push(r);
  saveState();
  renderComments();
  return true;
}

function deleteComment(id){
  if(!confirm('Delete this comment?')) return;
  comments = comments.filter(c => c.id !== id);
  saveState();
  renderComments();
}

function deleteReply(parentId, replyId){
  if(!confirm('Delete this reply?')) return;
  const parent = comments.find(c => c.id === parentId);
  if(!parent) return;
  parent.replies = parent.replies.filter(r => r.id !== replyId);
  saveState();
  renderComments();
}

function toggleLike(commentId, replyId){
  const comment = comments.find(c => c.id === commentId);
  if(!comment) return;
  if(replyId){
    const reply = comment.replies.find(r => r.id === replyId);
    if(!reply) return;
    reply.likes = (reply.likes || 0) + 1;
  } else {
    comment.likes = (comment.likes || 0) + 1;
  }
  saveState();
  renderComments();
}

function openReplyInput(commentId, commentNode){
  const existing = document.querySelectorAll('.reply-input-temp');
  existing.forEach(n => n.remove());

  const node = document.createElement('div');
  node.className = 'reply-input-temp';
  node.style.marginTop = '10px';
  node.innerHTML = `
    <div style="display:flex;gap:10px;align-items:flex-start">
      <img src="${currentUser.avatar}" style="width:38px;height:38px;border-radius:50%">
      <div style="flex:1">
        <textarea placeholder="Write a reply..." style="width:100%;min-height:56px;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.04);background:#05060a;color:var(--text)"></textarea>
        <div style="display:flex;justify-content:flex-end;margin-top:8px">
          <button class="btn" style="background:transparent;padding:8px 10px;border:1px solid rgba(255,255,255,0.04);border-radius:8px;margin-right:8px">Cancel</button>
          <button class="btn subscribe">Reply</button>
        </div>
      </div>
    </div>
  `;
  commentNode.querySelector('.comment-body').appendChild(node);
  const ta = node.querySelector('textarea');
  const cancel = node.querySelector('.btn');
  const replyBtn = node.querySelector('.btn.subscribe');

  cancel.addEventListener('click', ()=>node.remove());
  replyBtn.addEventListener('click', ()=>{
    const val = ta.value.trim();
    if(!val) return alert('Reply cannot be empty.');
    addReply(commentId, val);
  });
  ta.focus();
}

/* Post like & subscribe */
likePostBtn.addEventListener('click', ()=>{
  const current = parseInt(localStorage.getItem(LS_POST_LIKES) || '0', 10) || 0;
  localStorage.setItem(LS_POST_LIKES, (current + 1).toString());
  postLikeCountEl.textContent = current + 1;
  likePostBtn.classList.add('active');
});

subscribeBtn.addEventListener('click', ()=>{
  const sub = localStorage.getItem(LS_SUBSCRIBED) === '1';
  localStorage.setItem(LS_SUBSCRIBED, sub ? '0' : '1');
  subscribeBtn.textContent = sub ? 'Subscribe' : 'Subscribed';
});

subscribeEmailBtn.addEventListener('click', ()=>{
  const email = emailField.value.trim();
  if(!email || !email.includes('@')) return alert('Please enter a valid email.');
  localStorage.setItem('demo_subscriber_email', email);
  alert('Thanks! You are subscribed.');
  emailField.value = '';
});

addCommentBtn.addEventListener('click', ()=>{
  const val = newCommentText.value.trim();
  if(!val) return alert('Comment cannot be empty.');
  if(addComment(val)){
    newCommentText.value = '';
    renderComments();
  }
});

newCommentText.addEventListener('keydown', (e)=>{
  if((e.ctrlKey || e.metaKey) && e.key === 'Enter'){
    addCommentBtn.click();
  }
});

function seedDemo(){
  if(localStorage.getItem(LS_COMMENTS_KEY)) return;
  comments = [
    {
      id: uid('c'),
      author: { id:'u_anna', name:'Anna', avatar:'https://i.pravatar.cc/60?img=10' },
      text: 'Great article! I liked the simple structure and examples — very practical.',
      createdAt: Date.now() - 1000*60*60*5,
      likes: 2,
      replies: [
        { id: uid('r'), author:{id:'u_john',name:'John',avatar:'https://i.pravatar.cc/60?img=8'}, text:'Agree — especially the localStorage demo', createdAt: Date.now() - 1000*60*60*3, likes:1 }
      ]
    },
    {
      id: uid('c'),
      author: { id:'u_maya', name:'Maya', avatar:'https://i.pravatar.cc/60?img=5' },
      text: 'Would love to see a backend example next, with API endpoints.',
      createdAt: Date.now() - 1000*60*60*24,
      likes: 0,
      replies: []
    }
  ];
  saveState();
}

/* Start */
seedDemo();
loadState();
renderComments();

document.addEventListener('keyup', e=>{
  if(e.key === 'Tab') document.body.classList.add('show-focus');
});
</script>
</body>
</html>
