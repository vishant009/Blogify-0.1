<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile | Blogifyer</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    /* ... All your CSS as in your provided code ... */
    /* For brevity, not repeated here. Paste your CSS from above unchanged. */
    :root {
      --primary: #1abc9c;
      --secondary: #34495e;
      --danger: #e74c3c;
      --success: #2ecc71;
      --profile-bg: #232c3e;
      --card-bg: #2c3e50;
      --border: #34495e;
      --text-main: #ecf0f1;
      --text-dim: #b2becd;
      --shadow: 0 4px 20px 0 rgba(31, 38, 135, 0.15);
      --hover-bg: #20252a;
    }
    /* ... rest of your CSS ... */
  </style>
</head>
<body>
  <%- include('partials/header', { user }) %>
  <div class="container">
    <% if (success_msg) { %>
      <div class="alert alert-success"><i class="fas fa-check-circle"></i> <%= success_msg %></div>
    <% } %>
    <% if (error_msg) { %>
      <div class="alert alert-error"><i class="fas fa-exclamation-circle"></i> <%= error_msg %></div>
    <% } %>
    <% if (profileUser) { %>
      <!-- Profile Header, Actions, Popups, Blogs Section -->
      <!-- ... All your HTML up to the end of the blogs section, unchanged ... -->
      <!-- For brevity, not repeated here. Paste your EJS structure from above. -->
      <!-- ... -->
    <% } else { %>
      <div class="alert alert-error">Profile not found.</div>
    <% } %>
  </div>
  <div id="shareModal" class="modal">
    <button class="close-btn" onclick="closeShare()">&times;</button>
    <h3>Share Blog</h3>
    <div class="share-options">
      <button class="share-btn" id="share-facebook"><i class="fab fa-facebook"></i> Facebook</button>
      <button class="share-btn" id="share-instagram"><i class="fab fa-instagram"></i> Instagram</button>
      <button class="share-btn" id="share-whatsapp"><i class="fab fa-whatsapp"></i> WhatsApp</button>
      <button class="share-btn" id="copy-link"><i class="fas fa-copy"></i> Copy Link</button>
    </div>
  </div>
  <div class="popup-overlay"></div>
  <script>
    // --- Dropdown and comment popup logic (robust, only one open at a time) ---
    // Helper: Close all dropdown menus
    function closeAllDropdowns() {
      document.querySelectorAll('.dropdown-menu.active').forEach(menu => menu.classList.remove('active'));
    }
    // Blog 3-dot menu
    function toggleMenu(id) {
      closeAllDropdowns();
      const menu = document.getElementById(`menu-${id}`);
      if (menu) menu.classList.toggle('active');
    }
    // Comment 3-dot menu
    function toggleCommentMenu(id) {
      closeAllDropdowns();
      const menu = document.getElementById(`comment-menu-${id}`);
      if (menu) menu.classList.toggle('active');
    }
    // Hide dropdown menus on click outside
    document.addEventListener('click', (e) => {
      if (
        !e.target.closest('.blog-menu') &&
        !e.target.closest('.comment-menu') &&
        !e.target.classList.contains('dots-btn')
      ) {
        closeAllDropdowns();
      }
      if (e.target === document.getElementById('shareModal')) {
        closeShare();
      }
    });
    // Hide dropdowns on ESC
    window.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeAllDropdowns();
        closeShare();
      }
    });

    // --- Share Modal Logic ---
    let currentBlogId = null;
    function openShare(id) {
      currentBlogId = id;
      const shareModal = document.getElementById('shareModal');
      shareModal.style.display = 'block';
      setTimeout(() => {
        shareModal.classList.add('active');
      }, 8);
      const link = `${window.location.origin}/blog/${id}`;
      document.getElementById('share-facebook').onclick = () => window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(link)}`, '_blank');
      document.getElementById('share-instagram').onclick = () => {
        navigator.clipboard.writeText(link);
        alert('Link copied! Open Instagram app to share.');
      };
      document.getElementById('share-whatsapp').onclick = () => window.open(`https://api.whatsapp.com/send?text=${encodeURIComponent(link)}`, '_blank');
      document.getElementById('copy-link').onclick = () => {
        navigator.clipboard.writeText(link);
        alert('Link copied!');
      };
    }
    function closeShare() {
      const shareModal = document.getElementById('shareModal');
      shareModal.classList.remove('active');
      setTimeout(() => {
        shareModal.style.display = 'none';
      }, 400);
    }

    // --- Likes/Comments Modal logic ---
    function showLikes(id) {
      closeAllDropdowns();
      const commentsModal = document.getElementById('commentsModal-' + id);
      if (commentsModal && commentsModal.classList.contains('active')) hideComments(id);
      let modal = document.getElementById('likesModal-' + id);
      modal.style.display = 'block';
      setTimeout(() => modal.classList.add('active'), 8);
      const overlay = document.querySelector('.popup-overlay');
      overlay.classList.add('overlay-transparent');
      overlay.style.display = 'block';
    }
    function hideLikes(id) {
      let modal = document.getElementById('likesModal-' + id);
      modal.classList.remove('active');
      setTimeout(() => { modal.style.display = 'none'; }, 400);
      const overlay = document.querySelector('.popup-overlay');
      overlay.classList.remove('overlay-transparent');
      overlay.style.display = 'none';
    }
    function showComments(id) {
      closeAllDropdowns();
      const likesModal = document.getElementById('likesModal-' + id);
      if (likesModal && likesModal.classList.contains('active')) hideLikes(id);
      let modal = document.getElementById('commentsModal-' + id);
      modal.style.display = 'block';
      setTimeout(() => modal.classList.add('active'), 8);
      const overlay = document.querySelector('.popup-overlay');
      overlay.classList.add('overlay-transparent');
      overlay.style.display = 'block';
      const textarea = modal.querySelector('.post-comment-form textarea');
      if (textarea) textarea.focus();
    }
    function hideComments(id) {
      let modal = document.getElementById('commentsModal-' + id);
      modal.classList.remove('active');
      setTimeout(() => { modal.style.display = 'none'; }, 400);
      const overlay = document.querySelector('.popup-overlay');
      overlay.classList.remove('overlay-transparent');
      overlay.style.display = 'none';
    }

    // --- Popups for followers, following, common ---
    document.addEventListener('DOMContentLoaded', () => {
      // Likes/Comments modal close buttons
      document.querySelectorAll('.close-likes').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const modal = e.target.closest('.modal');
          const id = modal.id.split('-')[1];
          hideLikes(id);
        });
      });
      document.querySelectorAll('.close-comments').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const modal = e.target.closest('.modal');
          const id = modal.id.split('-')[1];
          hideComments(id);
        });
      });
      // Followers/Following/Common popups
      const followersToggle = document.querySelector('.followers-toggle');
      const followingToggle = document.querySelector('.following-toggle');
      const commonToggle = document.querySelector('.common-toggle');
      const followersPopup = document.querySelector('.followers-popup');
      const followingPopup = document.querySelector('.following-popup');
      const commonPopup = document.querySelector('.common-popup');
      const closeFollowers = document.querySelector('.close-followers');
      const closeFollowing = document.querySelector('.close-following');
      const closeCommon = document.querySelector('.close-common');
      const overlay = document.querySelector('.popup-overlay');
      const showPopup = (popup) => {
        if (popup) {
          popup.style.display = 'block';
          overlay.style.display = 'block';
          setTimeout(() => popup.classList.add('active'), 8);
          popup.focus();
        }
      };
      const hidePopup = (popup) => {
        if (popup) {
          popup.classList.remove('active');
          setTimeout(() => {
            popup.style.display = 'none';
            overlay.style.display = 'none';
          }, 400);
        }
      };
      if (followersToggle && followersPopup) {
        followersToggle.addEventListener('click', () => showPopup(followersPopup));
        followersToggle.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); showPopup(followersPopup); }
        });
      }
      if (closeFollowers && followersPopup) closeFollowers.addEventListener('click', () => hidePopup(followersPopup));
      if (followingToggle && followingPopup) {
        followingToggle.addEventListener('click', () => showPopup(followingPopup));
        followingToggle.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); showPopup(followingPopup); }
        });
      }
      if (closeFollowing && followingPopup) closeFollowing.addEventListener('click', () => hidePopup(followingPopup));
      if (commonToggle && commonPopup) {
        commonToggle.addEventListener('click', () => showPopup(commonPopup));
        commonToggle.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); showPopup(commonPopup); }
        });
      }
      if (closeCommon && commonPopup) closeCommon.addEventListener('click', () => hidePopup(commonPopup));
      overlay.addEventListener('click', () => {
        hidePopup(followersPopup);
        hidePopup(followingPopup);
        hidePopup(commonPopup);
        document.querySelectorAll('.modal.active').forEach(modal => {
          modal.classList.remove('active');
          setTimeout(() => { modal.style.display = 'none'; }, 400);
        });
        overlay.style.display = 'none';
      });
      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          hidePopup(followersPopup);
          hidePopup(followingPopup);
          hidePopup(commonPopup);
          document.querySelectorAll('.modal.active').forEach(modal => {
            modal.classList.remove('active');
            setTimeout(() => { modal.style.display = 'none'; }, 400);
          });
          overlay.style.display = 'none';
        }
      });

      // AJAX for blog likes
      document.querySelectorAll('.ajax-like-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const blogId = button.dataset.blogId;
          let isLiked = button.dataset.liked === 'true';
          const likesCountSpan = button.closest('.blog-card').querySelector('.likes-count');
          try {
            const response = await fetch(`/blog/${blogId}/like`, {
              method: 'POST',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
              }
            });
            if (response.ok) {
              const data = await response.json();
              isLiked = data.isLiked;
              button.dataset.liked = isLiked ? 'true' : 'false';
              button.classList.toggle('liked');
              likesCountSpan.innerHTML = `<i class="fas fa-heart"></i> ${data.likesCount} Likes`;
              button.innerHTML = `<i class="fas ${isLiked ? 'fa-heart' : 'fa-heart-broken'}"></i> ${isLiked ? 'Unlike' : 'Like'}`;
            }
          } catch (error) { console.error('Error:', error); }
        });
      });
      // AJAX for follow/unfollow/cancel button
      document.querySelectorAll('.ajax-follow-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const userId = button.dataset.userId;
          let currentStatus = button.dataset.followStatus;
          let endpoint = '';
          if (currentStatus === 'following') endpoint = `/user/unfollow/${userId}`;
          else if (currentStatus === 'requested') endpoint = `/user/cancel-follow/${userId}`;
          else endpoint = `/user/follow/${userId}`;
          try {
            const response = await fetch(endpoint, {
              method: 'POST',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
              }
            });
            if (response.ok) {
              const data = await response.json();
              currentStatus = data.newStatus;
              button.dataset.followStatus = currentStatus;
              button.classList.remove('following', 'requested', 'cancel');
              if (currentStatus === 'following') {
                button.innerHTML = '<i class="fas fa-user-minus"></i> Unfollow';
                button.classList.add('following');
              } else if (currentStatus === 'requested') {
                button.innerHTML = '<i class="fas fa-user-times"></i> Cancel Request';
                button.classList.add('requested', 'cancel');
              } else {
                button.innerHTML = '<i class="fas fa-user-plus"></i> Follow';
              }
              location.reload();
            }
          } catch (error) { console.error('Error:', error); }
        });
      });

      // AJAX comment submit handler
      function handleFormSubmit(e, successCallback) {
        e.preventDefault();
        const form = e.target;
        fetch(form.action, {
          method: 'POST',
          body: new URLSearchParams(new FormData(form)),
          headers: {
            'X-Requested-With': 'XMLHttpRequest',
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }).then(async response => {
          if (response.ok) {
            const data = await response.json();
            successCallback(data, form);
          } else {
            alert('Action failed. Please try again.');
          }
        }).catch(error => {
          alert('An error occurred. Please try again.');
        });
      }
      // Handle main comment form submission (for new comments)
      document.querySelectorAll('.post-comment-form').forEach(form => {
        form.addEventListener('submit', (e) => {
          handleFormSubmit(e, (data, form) => {
            if (data.success) {
              const newComment = data.newComment;
              const commentsList = form.closest('.modal').querySelector('.comments-list');
              const newCommentHtml = `
                <div class="comment-block" data-comment-id="${newComment._id}">
                  <img src="${newComment.createdBy.profileImageURL}" alt="Profile Image">
                  <div class="comment-content">
                    <div class="comment-author"><a href="/profile/${newComment.createdBy._id}" style="color:var(--primary);text-decoration:none;">${newComment.createdBy.fullname}</a></div>
                    <div class="comment-text">${newComment.content}</div>
                    <div class="comment-time"><i class="fas fa-clock"></i> Just now</div>
                    <div class="comment-actions">
                      <button class="comment-action-btn like-comment-btn" data-comment-id="${newComment._id}">
                        <i class="fas fa-heart"></i>
                        <span class="like-count">0</span>
                      </button>
                      <button class="comment-action-btn reply-btn" data-comment-id="${newComment._id}">
                        <i class="fas fa-reply"></i> Reply
                      </button>
                      <span class="reply-count"><i class="fas fa-reply-all"></i> 0</span>
                    </div>
                    <div class="comment-replies"></div>
                    <div class="reply-form-container"></div>
                  </div>
                  <div class="comment-menu">
                    <button class="dots-btn" onclick="toggleCommentMenu('${newComment._id}')">
                      <i class="fas fa-ellipsis-v"></i>
                    </button>
                    <div class="dropdown-menu" id="comment-menu-${newComment._id}">
                      <button class="delete-btn delete-comment-btn" data-comment-id="${newComment._id}"><i class="fas fa-trash"></i> Delete</button>
                    </div>
                  </div>
                </div>
              `;
              commentsList.innerHTML += newCommentHtml;
              form.querySelector('textarea').value = '';
              // Remove "No comments yet" if present
              const noCommentsDiv = commentsList.querySelector('div[style*="color:#b2becd"]');
              if (noCommentsDiv) noCommentsDiv.remove();
              // Update total comments count
              const modal = form.closest('.modal');
              const modalId = modal.id;
              const blogId = modalId.split('-')[1];
              const blogCard = document.querySelector(`.blog-card[data-blog-id="${blogId}"]`);
              const countSpan = blogCard.querySelector('.comments-count');
              const currentCountMatch = countSpan.innerHTML.match(/(\d+) Comments/);
              let currentCount = parseInt(currentCountMatch ? currentCountMatch[1] : 0);
              currentCount += 1;
              countSpan.innerHTML = `<i class="fas fa-comments"></i> ${currentCount} Comments`;
            } else {
              alert('Failed to post comment.');
            }
          });
        });
      });
    });

    // Delegated event listener for dynamic comment actions (like, delete, reply)
    document.addEventListener('click', async (e) => {
      // Like comment
      const likeButton = e.target.closest('.like-comment-btn');
      if (likeButton) {
        const commentId = likeButton.dataset.commentId;
        const isLiked = likeButton.classList.contains('liked');
        const likeCountSpan = likeButton.querySelector('.like-count');
        try {
          const response = await fetch(`/comment/${commentId}/like`, {
            method: isLiked ? 'DELETE' : 'POST',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/json'
            }
          });
          if (response.ok) {
            const data = await response.json();
            likeButton.classList.toggle('liked');
            likeCountSpan.textContent = data.likesCount;
          }
        } catch (error) {
          console.error('Error during fetch:', error);
        }
        return;
      }
      // Delete comment/reply
      const deleteButton = e.target.closest('.delete-comment-btn');
      if (deleteButton) {
        if (!confirm('Are you sure you want to delete this?')) return;
        const commentId = deleteButton.dataset.commentId;
        const commentBlock = deleteButton.closest('.comment-block');
        const isReply = commentBlock.parentElement.classList.contains('comment-replies');
        const repliesContainer = commentBlock.querySelector('.comment-replies');
        const replyCount = repliesContainer ? repliesContainer.querySelectorAll('.comment-block').length : 0;
        const deletedCount = isReply ? 1 : 1 + replyCount;
        try {
          const response = await fetch(`/comment/${commentId}`, {
            method: 'DELETE',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Content-Type': 'application/json'
            }
          });
          if (response.ok) {
            commentBlock.remove();
            // Update total comments count
            const modal = deleteButton.closest('.modal');
            const modalId = modal.id;
            const blogId = modalId.split('-')[1];
            const blogCard = document.querySelector(`.blog-card[data-blog-id="${blogId}"]`);
            const countSpan = blogCard.querySelector('.comments-count');
            const currentCountMatch = countSpan.innerHTML.match(/(\d+) Comments/);
            let currentCount = parseInt(currentCountMatch ? currentCountMatch[1] : 0);
            currentCount -= deletedCount;
            countSpan.innerHTML = `<i class="fas fa-comments"></i> ${currentCount} Comments`;
            // Check if no comments left
            const commentsList = modal.querySelector('.comments-list');
            if (commentsList.querySelectorAll('.comment-block').length === 0) {
              commentsList.innerHTML = '<div style="color:#b2becd;font-size:1.06rem;">No comments yet.</div>';
            }
          } else {
            alert('Failed to delete');
          }
        } catch (error) {
          alert('An error occurred');
        }
        return;
      }
      // Reply button
      const replyButton = e.target.closest('.reply-btn');
      if (replyButton) {
        const commentBlock = replyButton.closest('.comment-block');
        const replyFormContainer = commentBlock.querySelector('.reply-form-container');
        const commentId = replyButton.dataset.commentId;
        // Remove any other reply forms
        document.querySelectorAll('.comment-reply-form').forEach(form => form.remove());
        // Insert reply form
        const replyFormHtml = `
          <form action="/comment/reply/${commentId}" method="POST" class="comment-reply-form">
            <textarea name="content" required placeholder="Write a reply…" rows="2"
                      style="width:100%; padding:.6rem; border-radius:4px; background:#2c3e50; color:#ecf0f1; border:1px solid #34495e;"></textarea>
            <button type="submit" style="margin-top:.5rem; padding:.5rem 1rem; background:#3498db; border:none; border-radius:4px; color:#fff; cursor:pointer;">
              Post Reply
            </button>
          </form>
        `;
        replyFormContainer.innerHTML = replyFormHtml;
        // Focus on the new textarea & add submit listener
        const newForm = replyFormContainer.querySelector('form');
        if (newForm) {
          const textarea = newForm.querySelector('textarea');
          if (textarea) textarea.focus();
          newForm.addEventListener('submit', (e) => {
            handleFormSubmit(e, (data, form) => {
              if (data.success) {
                const newReply = data.newReply;
                const repliesContainer = form.closest('.comment-content').querySelector('.comment-replies');
                const replyHtml = `
                  <div class="comment-block" data-comment-id="${newReply._id}">
                    <img src="${newReply.createdBy.profileImageURL}" alt="Profile Image">
                    <div class="comment-content">
                      <div class="comment-author"><a href="/profile/${newReply.createdBy._id}" style="color:var(--primary);text-decoration:none;">${newReply.createdBy.fullname}</a></div>
                      <div class="comment-text">${newReply.content}</div>
                      <div class="comment-time"><i class="fas fa-clock"></i> Just now</div>
                      <div class="comment-actions">
                        <button class="comment-action-btn like-comment-btn" data-comment-id="${newReply._id}">
                          <i class="fas fa-heart"></i>
                          <span class="like-count">0</span>
                        </button>
                      </div>
                    </div>
                    <div class="comment-menu">
                      <button class="dots-btn" onclick="toggleCommentMenu('${newReply._id}')">
                        <i class="fas fa-ellipsis-v"></i>
                      </button>
                      <div class="dropdown-menu" id="comment-menu-${newReply._id}">
                        <button class="delete-btn delete-comment-btn" data-comment-id="${newReply._id}"><i class="fas fa-trash"></i> Delete</button>
                      </div>
                    </div>
                  </div>
                `;
                repliesContainer.innerHTML += replyHtml;
                form.remove();
                // Update total comments count
                const modal = form.closest('.modal');
                const modalId = modal.id;
                const blogId = modalId.split('-')[1];
                const blogCard = document.querySelector(`.blog-card[data-blog-id="${blogId}"]`);
                const countSpan = blogCard.querySelector('.comments-count');
                const currentCountMatch = countSpan.innerHTML.match(/(\d+) Comments/);
                let currentCount = parseInt(currentCountMatch ? currentCountMatch[1] : 0);
                currentCount += 1;
                countSpan.innerHTML = `<i class="fas fa-comments"></i> ${currentCount} Comments`;
                // Update reply count
                const replyCountSpan = replyButton.closest('.comment-actions').querySelector('.reply-count');
                const currentReplyCount = parseInt(replyCountSpan.textContent.match(/\d+/)[0]);
                replyCountSpan.innerHTML = `<i class="fas fa-reply-all"></i> ${currentReplyCount + 1}`;
              } else {
                alert('Failed to post reply.');
              }
            });
          });
        }
        return;
      }
    });
  </script>
</body>
</html>
