<!-- views/profile.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Previous head content remains unchanged -->
  <style>
    /* Previous CSS remains unchanged except for the following updates */

    /* Popups and Modals */
    .popup, .modal {
      display: none;
      position: fixed;
      bottom: 0;
      left: 0; /* Changed to full width */
      transform: translate(0, 100%); /* Start from bottom */
      width: 100%; /* Full width */
      max-width: none; /* Remove max-width constraint */
      max-height: 700vh; /* Set max height to 700vh */
      overflow-y: auto;
      background: var(--card-bg);
      padding: 2.2rem 1.2rem 1.2rem;
      border-top-left-radius: 1rem;
      border-top-right-radius: 1rem;
      box-shadow: 0 -15px 40px rgba(0,0,0,0.28);
      z-index: 2200;
      transition: transform 0.4s cubic-bezier(0.5,1.6,0.4,0.9);
    }
    .popup.active, .modal.active {
      display: block;
      transform: translate(0, 0); /* Slide up to top */
    }
    .popup h3, .modal h3 {
      margin-top: 0;
      color: var(--primary);
      margin-bottom: 1.2rem;
      font-size: 1.25rem;
      letter-spacing: .5px;
    }
    .popup .close-btn, .modal .close-btn {
      position: absolute;
      top: 14px;
      right: 18px;
      background: none;
      border: none;
      color: var(--text-main);
      font-size: 1.33rem;
      cursor: pointer;
      transition: color 0.2s;
    }
    .popup .close-btn:hover, .modal .close-btn:hover {
      color: var(--danger);
    }
    .popup-list-user {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem;
      padding: 0.5rem 0;
      border-bottom: 1px solid var(--border);
    }
    .popup-list-user:last-child {
      border-bottom: none;
    }
    .popup-list-user img {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
      background: #181c20;
    }
    .popup-list-user a {
      color: var(--primary);
      text-decoration: none;
      font-size: 1.07rem;
      font-weight: 500;
      transition: text-decoration 0.15s;
    }
    .popup-list-user a:hover {
      text-decoration: underline;
    }
    .popup-overlay {
      display: none;
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,.48);
      z-index: 2000;
    }
    /* Specific styles for followers, following, and common popups */
    .followers-popup, .following-popup, .common-popup {
      left: 0;
      width: 100%;
      max-height: 700vh; /* Consistent height */
      transform: translate(0, 100%); /* Start from bottom */
      background: #252b3f;
      border-radius: 0;
    }
    .followers-popup.active, .following-popup.active, .common-popup.active {
      transform: translate(0, 0); /* Slide up */
    }
    /* Likes and Comments modals */
    .modal {
      width: 100%; /* Full width */
      max-height: 700vh; /* Consistent height */
      transform: translate(0, 100%); /* Start from bottom */
      border-radius: 0; /* Consistent with popups */
    }
    .modal.active {
      transform: translate(0, 0); /* Slide up */
    }
    /* Remove media query for centered modals to enforce bottom-to-top behavior */
    @media (min-width: 601px) {
      .popup, .modal {
        bottom: 0;
        left: 0;
        transform: translate(0, 100%); /* Keep bottom-to-top */
      }
      .popup.active, .modal.active {
        transform: translate(0, 0); /* Slide up */
      }
      .popup, .modal {
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
      }
    }
    /* Rest of the CSS remains unchanged */
  </style>
</head>
<body>
  <!-- Previous body content remains unchanged -->
  <script>
    // Previous JavaScript remains unchanged except for the following updates

    function showLikes(id) {
      const commentsModal = document.getElementById('commentsModal-' + id);
      if (commentsModal && commentsModal.classList.contains('active')) {
        hideComments(id);
      }
      let modal = document.getElementById('likesModal-' + id);
      modal.style.display = 'block';
      setTimeout(() => {
        modal.classList.add('active');
      }, 8);
      const overlay = document.querySelector('.popup-overlay');
      overlay.style.display = 'block';
      modal.focus(); // Ensure accessibility
    }

    function hideLikes(id) {
      let modal = document.getElementById('likesModal-' + id);
      modal.classList.remove('active');
      setTimeout(() => {
        modal.style.display = 'none';
      }, 400);
      const overlay = document.querySelector('.popup-overlay');
      overlay.style.display = 'none';
    }
    
    function showComments(id) {
      const likesModal = document.getElementById('likesModal-' + id);
      if (likesModal && likesModal.classList.contains('active')) {
        hideLikes(id);
      }
      let modal = document.getElementById('commentsModal-' + id);
      modal.style.display = 'block';
      setTimeout(() => {
        modal.classList.add('active');
      }, 8);
      const overlay = document.querySelector('.popup-overlay');
      overlay.style.display = 'block';
      modal.focus(); // Ensure accessibility
    }

    function hideComments(id) {
      let modal = document.getElementById('commentsModal-' + id);
      modal.classList.remove('active');
      setTimeout(() => {
        modal.style.display = 'none';
      }, 400);
      const overlay = document.querySelector('.popup-overlay');
      overlay.style.display = 'none';
    }

    // Popup logic (followers, following, common)
    const followersToggle = document.querySelector('.followers-toggle');
    const followingToggle = document.querySelector('.following-toggle');
    const commonToggle = document.querySelector('.common-toggle');
    const followersPopup = document.querySelector('.followers-popup');
    const followingPopup = document.querySelector('.following-popup');
    const commonPopup = document.querySelector('.common-popup');
    const closeFollowers = document.querySelector('.close-followers');
    const closeFollowing = document.querySelector('.close-following');
    const closeCommon = document.querySelector('.close-common');
    const overlay = document.querySelector('.popup-overlay');

    const showPopup = (popup) => {
      if (popup) {
        popup.style.display = 'block';
        overlay.style.display = 'block';
        setTimeout(() => {
          popup.classList.add('active');
        }, 8);
        popup.focus(); // Ensure accessibility
      }
    };
    const hidePopup = (popup) => {
      if (popup) {
        popup.classList.remove('active');
        setTimeout(() => {
          popup.style.display = 'none';
          overlay.style.display = 'none';
        }, 400);
      }
    };

    if (followersToggle && followersPopup) {
      followersToggle.addEventListener('click', () => showPopup(followersPopup));
      followersToggle.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          showPopup(followersPopup);
        }
      });
    }
    if (closeFollowers && followersPopup) {
      closeFollowers.addEventListener('click', () => hidePopup(followersPopup));
    }

    if (followingToggle && followingPopup) {
      followingToggle.addEventListener('click', () => showPopup(followingPopup));
      followingToggle.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          showPopup(followingPopup);
        }
      });
    }
    if (closeFollowing && followingPopup) {
      closeFollowing.addEventListener('click', () => hidePopup(followingPopup));
    }

    if (commonToggle && commonPopup) {
      commonToggle.addEventListener('click', () => showPopup(commonPopup));
      commonToggle.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          showPopup(commonPopup);
        }
      });
    }
    if (closeCommon && commonPopup) {
      closeCommon.addEventListener('click', () => hidePopup(commonPopup));
    }

    // Rest of the JavaScript remains unchanged
  </script>
</body>
</html>
