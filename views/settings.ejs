<!-- views/settings.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Settings | Blogify</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
  <style>
    body {
      background-color: #1a2634;
      color: #ecf0f1;
      margin: 0;
      font-family: 'Arial', sans-serif;
    }
    .container {
      max-width: 800px;
      margin: 2rem auto;
      padding: 2rem;
      background-color: #2c3e50;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    .settings-section {
      margin-bottom: 2rem;
    }
    .settings-section h2 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
      color: #ecf0f1;
    }
    .settings-action {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background-color: #34495e;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .settings-action:hover {
      background-color: #3e5a75;
    }
    .settings-action.delete-account-btn {
      background-color: #e74c3c;
    }
    .settings-action.delete-account-btn:hover {
      background-color: #c0392b;
    }
    .popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #2c3e50;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      z-index: 2000;
      max-width: 400px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
      animation: fadeIn 0.3s ease-in-out;
    }
    .popup-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1500;
    }
    .close-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: none;
      border: none;
      color: #ecf0f1;
      font-size: 1.2rem;
      cursor: pointer;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translate(-50%, -60%); }
      to { opacity: 1; transform: translate(-50%, -50%); }
    }
    input, textarea {
      padding: 0.75rem;
      border: 1px solid #34495e;
      border-radius: 4px;
      font-size: 1rem;
      background-color: #34495e;
      color: #ecf0f1;
      width: 100%;
      transition: border-color 0.3s;
    }
    input:focus, textarea:focus {
      border-color: #3498db;
    }
    button {
      padding: 0.75rem;
      background-color: #3498db;
      color: #ecf0f1;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.3s, transform 0.2s;
    }
    button.delete-btn {
      background-color: #e74c3c;
    }
    button.delete-btn:hover {
      background-color: #c0392b;
      transform: scale(1.05);
    }
    button:hover {
      background-color: #2980b9;
      transform: scale(1.05);
    }
    button:disabled {
      background-color: #7f8c8d;
      cursor: not-allowed;
      transform: none;
    }
    .message {
      display: none;
      padding: 0.75rem;
      margin-bottom: 1rem;
      border-radius: 4px;
      font-size: 0.9rem;
    }
    .success {
      background-color: #d4edda;
      color: #155724;
    }
    .error {
      background-color: #f8d7da;
      color: #721c24;
    }
    @media (max-width: 768px) {
      .container { margin: 1rem; padding: 1rem; }
      .popup { width: 95%; }
    }
  </style>
</head>
<body>
  <%- include('partials/header', { user }) %>

  <div class="container">
    <% if (success_msg) { %>
      <p class="message success" style="display: block;">
        <i class="fas fa-check-circle"></i> <%= success_msg %>
      </p>
    <% } %>
    <% if (error_msg) { %>
      <p class="message error" style="display: block;">
        <i class="fas fa-exclamation-circle"></i> <%= error_msg %>
      </p>
    <% } %>

    <div class="settings-section">
      <h2>Settings</h2>
      <div class="settings-action update-profile-btn">
        <i class="fas fa-user-edit"></i>
        <span>Update Profile</span>
      </div>
      <div class="settings-action privacy-security-btn">
        <i class="fas fa-shield-alt"></i>
        <span>Privacy/Security</span>
      </div>
      <div class="settings-action delete-account-btn">
        <i class="fas fa-trash-alt"></i>
        <span>Delete Account</span>
      </div>
    </div>

    <!-- Update Profile Popup -->
    <div class="popup update-profile-popup">
      <h3 style="color: #ecf0f1; margin-bottom: 1rem;">Update Profile</h3>
      <button class="close-btn close-update-profile" aria-label="Close Update Profile Popup">
        <i class="fas fa-times"></i>
      </button>
      <form action="/settings/update-profile" method="POST" enctype="multipart/form-data" style="
        display: flex;
        flex-direction: column;
        gap: 1rem;
      ">
        <label for="fullname" style="color: #ecf0f1;">Username</label>
        <input type="text" id="fullname" name="fullname" value="<%= user.fullname %>" aria-label="Username" required>
        <label for="bio" style="color: #ecf0f1;">Bio</label>
        <textarea id="bio" name="bio" aria-label="Bio" style="resize: vertical; min-height: 100px;"><%= user.bio || '' %></textarea>
        <label for="profileImage" style="color: #ecf0f1;">Profile Image</label>
        <input type="file" id="profileImage" name="profileImage" accept="image/*" aria-label="Profile Image">
        <button type="submit">
          <i class="fas fa-save"></i> Update Profile
        </button>
      </form>
    </div>

    <!-- Privacy/Security Popup -->
    <div class="popup privacy-security-popup">
      <h3 style="color: #ecf0f1; margin-bottom: 1rem;">Privacy/Security</h3>
      <button class="close-btn close-privacy-security" aria-label="Close Privacy/Security Popup">
        <i class="fas fa-times"></i>
      </button>
      <p id="password-message" class="message" aria-live="polite"></p>
      <form id="password-form" style="
        display: flex;
        flex-direction: column;
        gap: 1rem;
      ">
        <p style="color: #ecf0f1;">Click below to receive a password reset link via email.</p>
        <button type="submit" id="password-submit">
          <i class="fas fa-paper-plane"></i> Send Password Reset Link
        </button>
      </form>
      <hr style="margin: 1rem 0;">
      <form id="privacy-form" style="
        display: flex;
        flex-direction: column;
        gap: 1rem;
      ">
        <p style="color: #ecf0f1;">Account Privacy:</p>
        <label>
          <input type="radio" name="isPrivate" value="false" <%= !user.isPrivate ? 'checked' : '' %>> Public
        </label>
        <label>
          <input type="radio" name="isPrivate" value="true" <%= user.isPrivate ? 'checked' : '' %>> Private
        </label>
        <button type="submit" id="privacy-submit">
          <i class="fas fa-save"></i> Update Privacy
        </button>
      </form>
    </div>

    <!-- Delete Account Popup -->
    <div class="popup delete-account-popup">
      <h3 style="color: #ecf0f1; margin-bottom: 1rem;">Delete Account</h3>
      <button class="close-btn close-delete-account" aria-label="Close Delete Account Popup">
        <i class="fas fa-times"></i>
      </button>
      <p id="delete-message" class="message" aria-live="polite"></p>
      <form id="delete-account-form" style="
        display: flex;
        flex-direction: column;
        gap: 1rem;
      ">
        <p style="color: #ecf0f1;">Enter your password to confirm account deletion. This action is irreversible.</p>
        <label for="delete-password" style="color: #ecf0f1;">Password</label>
        <input type="password" id="delete-password" name="password" aria-label="Password" required>
        <button type="submit" id="delete-submit" class="delete-btn">
          <i class="fas fa-trash-alt"></i> Delete Account
        </button>
      </form>
    </div>

    <div class="popup-overlay"></div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const updateProfileBtn = document.querySelector('.update-profile-btn');
      const privacySecurityBtn = document.querySelector('.privacy-security-btn');
      const deleteAccountBtn = document.querySelector('.delete-account-btn');
      const updateProfilePopup = document.querySelector('.update-profile-popup');
      const privacySecurityPopup = document.querySelector('.privacy-security-popup');
      const deleteAccountPopup = document.querySelector('.delete-account-popup');
      const closeUpdateProfile = document.querySelector('.close-update-profile');
      const closePrivacySecurity = document.querySelector('.close The user's message is: "Do update  I want add fecher  account  public / private 

How Fechers  work  

1{
If user1 account  is public  allow  all can see user1 posted  blogs 

If user1 account  is private  only  allow  user1 followers  to see user1 posted  blogs

Add this  account  public or private  options in settings.ejs Privacy/Security Popup  section 
}
2 and for follow button  if user account  public  

Than if user1 send Follow request to user2 no need to user accept  follow  request  it will directly  follow  accept  and show following 

3 users can like  and comment  on blog in profile.ejs  page 

"

Followed by a bunch of code files.

It seems like the user wants to update their Node.js/Express app to add a feature for account privacy: public or private.

Key points:

1. If account is public, anyone can see the user's blogs.

If private, only followers can see them.

Add option in settings.ejs under Privacy/Security popup.

2. For follow button: If the target user's account is public, follow request is auto-accepted.

If private, need approval.

3. Users can like and comment on blogs in profile.ejs page.

The code provided includes app.js, routes, models, views like home.ejs, settings.ejs, profile.ejs.

I need to implement these changes.

First, add a field to User model for privacy: boolean, say isPrivate: false (public by default).

Update userSchema.

Then, in settings, add a way to toggle it.

In settings.ejs, the Privacy/Security popup currently has password reset. Add account privacy toggle there.

Update the popup to include a checkbox or radio for public/private.

Add route to update privacy.

Then, in home.ejs and profile.ejs, filter blogs based on privacy.

In home, it's all blogs, but need to filter if private and not followed.

Home shows all blogs from all users.

For private users, only show their blogs if current user follows them or is owner.

In profile, if viewing a private profile, only show blogs if follower.

But profile is for a specific user.

Also, for follow: when sending follow request, if target is public, auto accept.

In /user/follow/:id, check if userToFollow is public, then directly add follower, else send notification.

Currently, it always sends request.

Need to modify that.

Point 3: like and comment on blog in profile.ejs.

Currently, profile.ejs shows blogs as cards with title and body snippet, but no like/comment.

Need to add like button and comment section under each blog in profile.

Similar to home.ejs which has them.

Home has per blog: like, follow author, likes preview, comments preview.

Clicking preview opens modal with likes or comments.

Comments modal has add comment, replies, etc.

Need similar for profile page, but since multiple blogs, perhaps each blog has its own modals.

Or load when clicked.

But to match, add the actions under each blog card in profile.

Currently profile blog cards are simple.

Make them similar to home's blog cards.

The user said "in profile.ejs page", so add like/comment there.

Also, "I want copy paste", probably wants the updated code to copy paste.

So, I need to provide the modified files.```javascript
// models/user.js (updated)
const { Schema, model, models } = require("mongoose");
const { createHmac, randomBytes } = require("crypto");
const { createTokenForUser } = require("../services/authentication");

const userSchema = new Schema(
  {
    fullname: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
    },
    salt: {
      type: String,
    },
    password: {
      type: String,
      required: true,
    },
    profileImageURL: {
      type: String,
      default: "/images/default.png",
    },
    role: {
      type: String,
      enum: ["USER", "ADMIN"],
      default: "USER",
    },
    following: [{ type: Schema.Types.ObjectId, ref: "User" }],
    followers: [{ type: Schema.Types.ObjectId, ref: "User" }],
    likedBlogs: [{ type: Schema.Types.ObjectId, ref: "Blog" }],
    bio: { type: String, trim: true },
    isVerified: {
      type: Boolean,
      default: false,
    },
    verificationCode: {
      type: String,
    },
    verificationCodeExpires: {
      type: Date,
    },
    resetPasswordToken: {
      type: String,
    },
    resetPasswordExpires: {
      type: Date,
    },
    isPrivate: { // New field for account privacy
      type: Boolean,
      default: false, // false means public, true means private
    },
  },
  { timestamps: true }
);

userSchema.pre("save", function (next) {
  if (!this.isModified("password")) return next();
  const salt = randomBytes(16).toString("hex");
  this.salt = salt;
  this.password = createHmac("sha256", salt).update(this.password).digest("hex");
  next();
});

userSchema.statics.matchPassword = async function (email, password) {
  const user = await this.findOne({ email });
  if (!user) throw new Error("User not found");
  if (!user.isVerified) throw new Error("Please verify your email before signing in");

  const salt = user.salt;
  const hashedPassword = user.password;
  const userProvidedHash = createHmac("sha256", salt).update(password).digest("hex");

  if (hashedPassword !== userProvidedHash) throw new Error("Incorrect password");
  return createTokenForUser(user);
};

const User = models.User || model("User", userSchema);

module.exports = User;
